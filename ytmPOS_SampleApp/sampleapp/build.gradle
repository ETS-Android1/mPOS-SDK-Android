buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    signingConfigs {
        release
    }

    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.youtransactor.sampleapp"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 201
        versionName "2.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        //dev
        debug {
            versionNameSuffix ".debug"
            debuggable true
            jniDebuggable true
        }

        //test
        internal {
            initWith debug
            useProguard true
            proguardFiles 'proguard-rules.pro'
            versionNameSuffix ".Test"
            signingConfig signingConfigs.release
        }

        //prod
        release {
            debuggable false
            jniDebuggable false
            minifyEnabled false
            useProguard true
            proguardFiles 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

}

def Properties props = new Properties()
def propFile = rootProject.file('keystore.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE')
            && props.containsKey('STORE_PASSWORD')
            && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'commons-codec:commons-codec:20041127.091804'
    implementation 'androidx.annotation:annotation:1.1.0'

    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'com.github.tony19:logback-android:1.3.0-2'

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'

    implementation "com.polidea.rxandroidble2:rxandroidble:1.10.2"
    implementation "com.jakewharton.rx2:replaying-share:2.1.1"
    implementation 'com.google.guava:guava:24.1-jre'

    implementation('com.crashlytics.sdk.android:crashlytics:2.5.7@aar') {
        transitive = true;
    }

    implementation files('libs/libApp.aar')
}
